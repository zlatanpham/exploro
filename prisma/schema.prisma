generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Organization {
    id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String               @db.VarChar(255)
    owner_user_id      String?
    created_at         DateTime?            @default(now()) @db.Timestamptz(6)
    updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
    User               User?                @relation(fields: [owner_user_id], references: [id], onUpdate: NoAction, map: "fk_owner_user")
    OrganizationMember OrganizationMember[]
    ApiKey             ApiKey[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model OrganizationMember {
    id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    organization_id String       @db.Uuid
    user_id         String
    role            String       @db.VarChar(50)
    joined_at       DateTime?    @default(now()) @db.Timestamptz(6)
    Organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_organization")
    user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

    @@unique([organization_id, user_id])
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String               @id @default(cuid())
    name                   String?
    email                  String?              @unique
    emailVerified          DateTime?
    image                  String?
    password               String? // Added for email/password authentication
    reset_password_token   String?              @map("resetPasswordToken")
    reset_password_expires DateTime?            @map("resetPasswordExpires")
    role                   String               @default("user") // user or admin
    language_preference    String               @default("vi") // vi or en
    created_at             DateTime             @default(now())
    updated_at             DateTime             @updatedAt
    Account                Account[]
    Organization           Organization[]
    OrganizationMember     OrganizationMember[]
    Session                Session[]
    Menu                   Menu[]
    FavoriteDish           FavoriteDish[]
    ApiKey                 ApiKey[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Meal Planning Models

model Dish {
    id               String           @id @default(cuid())
    name_vi          String           @db.VarChar(255)
    name_en          String?          @db.VarChar(255)
    description_vi   String           @db.Text
    description_en   String?          @db.Text
    instructions_vi  String           @db.Text
    instructions_en  String?          @db.Text
    difficulty       String           // easy, medium, hard
    cook_time        Int              // in minutes
    prep_time        Int              @default(0) // in minutes
    servings         Int              @default(4)
    image_url        String?
    source_url       String?
    status           String           @default("active") // active, inactive
    created_at       DateTime         @default(now())
    updated_at       DateTime         @updatedAt
    DishIngredient   DishIngredient[]
    DishTag          DishTag[]
    MenuDish         MenuDish[]
    FavoriteDish     FavoriteDish[]

    @@index([name_vi])
    @@index([status])
}

model IngredientCategory {
    id          String       @id @default(cuid())
    value       String       @unique @db.VarChar(50) // vegetables, meat, spices, etc.
    name_vi     String       @db.VarChar(100)
    name_en     String       @db.VarChar(100)
    description String?      @db.Text
    created_at  DateTime     @default(now())
    ingredients Ingredient[]

    @@index([value])
}

model Ingredient {
    id               String              @id @default(cuid())
    name_vi          String              @unique @db.VarChar(255)
    name_en          String?             @db.VarChar(255)
    category         String?             @db.VarChar(100) // legacy field, to be removed after migration
    category_id      String?             // foreign key to IngredientCategory table
    default_unit     String?             @db.VarChar(50) // legacy field, to be removed after migration
    unit_id          String              // foreign key to Unit table
    current_price    Decimal             @db.Decimal(10, 2) // in VND per unit
    density          Decimal?            @db.Decimal(10, 3) // g/ml for volume to mass conversion
    price_updated_at DateTime            @default(now())
    seasonal_flag    Boolean             @default(false)
    created_at       DateTime            @default(now())
    updated_at       DateTime            @updatedAt
    unit             Unit                @relation("IngredientUnit", fields: [unit_id], references: [id])
    ingredient_category IngredientCategory? @relation(fields: [category_id], references: [id])
    DishIngredient   DishIngredient[]
    PriceHistory     PriceHistory[]
    IngredientUnitMapping IngredientUnitMapping[]

    @@index([name_vi])
    @@index([category])
    @@index([category_id])
    @@index([unit_id])
}

model IngredientUnitMapping {
    id                    String     @id @default(cuid())
    ingredient_id         String
    count_unit_id         String     // Must be from 'count' category
    measurable_unit_id    String     // Must be from 'mass' or 'volume' category
    quantity              Decimal    @db.Decimal(10, 3) // Amount of measurable unit per count unit
    created_at            DateTime   @default(now())
    updated_at            DateTime   @updatedAt
    
    ingredient            Ingredient @relation(fields: [ingredient_id], references: [id], onDelete: Cascade)
    count_unit            Unit       @relation("CountUnit", fields: [count_unit_id], references: [id])
    measurable_unit       Unit       @relation("MeasurableUnit", fields: [measurable_unit_id], references: [id])

    @@unique([ingredient_id, count_unit_id])
    @@index([ingredient_id])
    @@index([count_unit_id])
    @@index([measurable_unit_id])
}

model DishIngredient {
    id                String     @id @default(cuid())
    dish_id           String
    ingredient_id     String
    quantity          Decimal    @db.Decimal(10, 3)
    unit              String?    @db.VarChar(50) // legacy field, to be removed after migration
    unit_id           String     // foreign key to Unit table
    converted_quantity Decimal?  @db.Decimal(10, 3) // quantity converted to ingredient's base unit
    conversion_factor Decimal?   @db.Decimal(20, 10) // factor used for conversion
    notes             String?    @db.Text
    optional          Boolean    @default(false)
    dish              Dish       @relation(fields: [dish_id], references: [id], onDelete: Cascade)
    ingredient        Ingredient @relation(fields: [ingredient_id], references: [id])
    unit_ref          Unit       @relation("DishIngredientUnit", fields: [unit_id], references: [id])

    @@unique([dish_id, ingredient_id])
    @@index([dish_id])
    @@index([ingredient_id])
    @@index([unit_id])
}

model Tag {
    id       String    @id @default(cuid())
    name_vi  String    @unique @db.VarChar(100)
    name_en  String?   @db.VarChar(100)
    category String?   @db.VarChar(50) // meal_type, cuisine, dietary, etc.
    DishTag  DishTag[]

    @@index([name_vi])
    @@index([category])
}

model DishTag {
    dish_id String
    tag_id  String
    dish    Dish   @relation(fields: [dish_id], references: [id], onDelete: Cascade)
    tag     Tag    @relation(fields: [tag_id], references: [id])

    @@id([dish_id, tag_id])
    @@index([dish_id])
    @@index([tag_id])
}

model Menu {
    id          String       @id @default(cuid())
    user_id     String
    name        String       @db.VarChar(255)
    description String?      @db.Text
    start_date  DateTime?
    end_date    DateTime?
    servings    Int          @default(4) // number of people
    visibility  String       @default("private") // private, public
    created_at  DateTime     @default(now())
    updated_at  DateTime     @updatedAt
    user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
    MenuDish    MenuDish[]
    MenuShare   MenuShare[]

    @@index([user_id])
    @@index([visibility])
}

model MenuDish {
    id         String   @id @default(cuid())
    menu_id    String
    dish_id    String
    meal_group String?  @db.VarChar(50) // breakfast, lunch, dinner, snack
    day_index  Int?     // 0 = Monday, 6 = Sunday
    quantity   Int      @default(1) // multiplier for the dish
    order_index Int     @default(0) // for manual ordering
    menu       Menu     @relation(fields: [menu_id], references: [id], onDelete: Cascade)
    dish       Dish     @relation(fields: [dish_id], references: [id])

    @@index([menu_id])
    @@index([dish_id])
}

model MenuShare {
    id          String    @id @default(cuid())
    menu_id     String
    share_code  String    @unique @default(cuid())
    permissions String    @default("view") // view, clone
    expires_at  DateTime?
    created_at  DateTime  @default(now())
    menu        Menu      @relation(fields: [menu_id], references: [id], onDelete: Cascade)

    @@index([menu_id])
    @@index([share_code])
}

model FavoriteDish {
    user_id    String
    dish_id    String
    created_at DateTime @default(now())
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    dish       Dish     @relation(fields: [dish_id], references: [id], onDelete: Cascade)

    @@id([user_id, dish_id])
    @@index([user_id])
    @@index([dish_id])
}

model PriceHistory {
    id            String     @id @default(cuid())
    ingredient_id String
    price         Decimal    @db.Decimal(10, 2)
    unit_id       String?    // Added for unit tracking
    recorded_at   DateTime   @default(now())
    ingredient    Ingredient @relation(fields: [ingredient_id], references: [id], onDelete: Cascade)
    unit          Unit?      @relation(fields: [unit_id], references: [id])

    @@index([ingredient_id])
    @@index([recorded_at])
}

// Unit Management Models

model UnitCategory {
    id          String   @id @default(cuid())
    name        String   @unique @db.VarChar(50) // mass, volume, count, etc.
    description String?  @db.Text
    created_at  DateTime @default(now())
    units       Unit[]

    @@index([name])
}

model Unit {
    id                   String           @id @default(cuid())
    category_id          String
    symbol               String           @unique @db.VarChar(20) // kg, g, ml, etc.
    name_vi              String           @db.VarChar(100) // kilogram, gram, etc.
    name_en              String           @db.VarChar(100)
    plural_vi            String?          @db.VarChar(100)
    plural_en            String?          @db.VarChar(100)
    is_base_unit         Boolean          @default(false) // base unit for the category
    factor_to_base       Decimal          @db.Decimal(20, 10) // conversion factor to base unit
    created_at           DateTime         @default(now())
    category             UnitCategory     @relation(fields: [category_id], references: [id])
    
    // Relations
    ingredients          Ingredient[]     @relation("IngredientUnit")
    dish_ingredients     DishIngredient[] @relation("DishIngredientUnit")
    price_histories      PriceHistory[]
    conversions_from     UnitConversion[] @relation("FromUnit")
    conversions_to       UnitConversion[] @relation("ToUnit")
    count_unit_mappings     IngredientUnitMapping[] @relation("CountUnit")
    measurable_unit_mappings IngredientUnitMapping[] @relation("MeasurableUnit")

    @@index([category_id])
    @@index([symbol])
}

model UnitConversion {
    id             String   @id @default(cuid())
    from_unit_id   String
    to_unit_id     String
    factor         Decimal  @db.Decimal(20, 10) // multiplication factor
    is_direct      Boolean  @default(true) // direct conversion or calculated
    created_at     DateTime @default(now())
    from_unit      Unit     @relation("FromUnit", fields: [from_unit_id], references: [id])
    to_unit        Unit     @relation("ToUnit", fields: [to_unit_id], references: [id])

    @@unique([from_unit_id, to_unit_id])
    @@index([from_unit_id])
    @@index([to_unit_id])
}

// API Key Management Models

model ApiKey {
    id              String         @id @default(cuid())
    organization_id String         @db.Uuid
    name            String         @db.VarChar(255)
    key_hash        String         @unique
    permissions     String[]       @default(["read", "write"]) // ['read', 'write', 'admin']
    last_used_at    DateTime?
    expires_at      DateTime?
    is_active       Boolean        @default(true)
    created_by      String
    created_at      DateTime       @default(now())
    revoked_at      DateTime?
    revoked_by      String?
    revoke_reason   String?
    usage_count     Int            @default(0)

    organization    Organization   @relation(fields: [organization_id], references: [id], onDelete: Cascade)
    user            User           @relation(fields: [created_by], references: [id])
    usage_logs      ApiUsageLog[]

    @@index([organization_id])
    @@index([key_hash])
    @@index([expires_at])
    @@index([is_active])
}

model ApiUsageLog {
    id              String    @id @default(cuid())
    api_key_id      String
    endpoint        String    @db.VarChar(255)
    method          String    @db.VarChar(10)
    status_code     Int
    response_time   Int       // milliseconds
    request_body    Json?     // for debugging failed requests
    error_message   String?
    ip_address      String?   @db.VarChar(45)
    user_agent      String?   @db.Text
    created_at      DateTime  @default(now())

    api_key         ApiKey    @relation(fields: [api_key_id], references: [id], onDelete: Cascade)

    @@index([api_key_id, created_at])
    @@index([endpoint, created_at])
    @@index([status_code, created_at])
}
